{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Build your own optimized local pseudopotential (LPP)\n",
    "\n",
    "In this tutorial you will be able to build you own LPP for Au.\n",
    "\n",
    "- Run a KS calculation to get the electronic density using [QEpy](http://qepy.rutgers.edu/)\n",
    "- Perform a OF calculation to optimize $v_{LPP}(\\mathbf{r})$\n",
    "- Test the generated LPP by comparing against the phonon spectra from [EMT](https://wiki.fysik.dtu.dk/ase/ase/phonons.html#module-ase.phonons) from [ASE](https://wiki.fysik.dtu.dk/ase/)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QEpy \n",
    "\n",
    "First we need to generate the target electron density using QEpy, for that we will need to load the following modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qepy.io import QEInput\n",
    "from qepy.driver import Driver"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following step is to build the crystal structure of FCC Au with ASE (feel free to use other phases)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ase.build import bulk\n",
    "atoms = bulk('Au', 'fcc', a=4.078)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the structure is built we set up the necessary options to instance the QEpy driver (refer to QE pw.x for details) and perform a scf calculation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "qe_options = {\n",
    "    '&control': {\n",
    "        'calculation': \"'scf'\",\n",
    "        'prefix': \"'tmp'\",\n",
    "        'pseudo_dir': \"'../DATA'\"},\n",
    "    '&system': {\n",
    "        'ibrav' : 0,\n",
    "        'degauss': 0.01,\n",
    "        'ecutwfc': 50,\n",
    "        'ecutrho': 300,\n",
    "        'occupations': \"'smearing'\"\n",
    "    },\n",
    "    '&electrons': {\n",
    "        'conv_thr' : 1.0e-8},\n",
    "     'atomic_species': ['Au 196.96657 au_lda_v1.uspp.F.UPF'],\n",
    "     'k_points automatic': ['11 11 11 0 0 0'],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "driver = Driver(qe_options=qe_options, atoms=atoms, logfile='tmp.out')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-132.2817713943313"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "driver.calc_energy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Collect the electron density for comparison\n",
    "\n",
    " - First retrieve the Quantum ESPRESSO density as a Fortran-ordered numpy array.\n",
    " - Then transform it into a DFTpy `DirectField` which is a class to handle real-space grid functions.\n",
    " - Write the density onto a `snpy` or `xsf` file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "density = driver.get_density()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho_ks = driver.data2field(density)\n",
    "ions = driver.get_dftpy_ions()\n",
    "rho_ks.write('../DATA/rho_target.xsf', ions=ions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFTpy: optimize the LPP\n",
    "\n",
    "In this section we will build a smooth Local pseudopotential with DFTpy modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dftpy.ions import Ions\n",
    "from dftpy.field import DirectField\n",
    "from dftpy.grid import DirectGrid\n",
    "from dftpy.functional import LocalPseudo, Functional, TotalFunctional\n",
    "from dftpy.formats import io\n",
    "from dftpy.optimization import Optimization\n",
    "from dftpy.mpi import sprint\n",
    "from dftpy.functional.pseudo.psp import PSP\n",
    "from dftpy.constants import environ\n",
    "from scipy.optimize import minimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We load the same PP as the KS calculation. We will optimize the LPP to reproduce the KS density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "ions, rho_target, _ = io.read_all('../DATA/rho_target.xsf')\n",
    "grid = rho_target.grid\n",
    "PP_list = {'Au': '../DATA/au_lda_v1.uspp.F.UPF'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "setting key: Au -> ../DATA/au_lda_v1.uspp.F.UPF\n"
     ]
    }
   ],
   "source": [
    "MaxPoints=1000 # number of points in the one-dimensional PP function\n",
    "PSEUDO = LocalPseudo(grid = grid, ions=ions, PP_list=PP_list, MaxPoints=MaxPoints)\n",
    "rho_ini = rho_target.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the needed density functionals\n",
    "Here we use TF + 0.2 vW, however you can choose any functional. We find the LPPs from TF+0.2vW to be transferable for use with other functionals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "KE = Functional(type='KEDF',name='TFvW', y=0.2)\n",
    "XC = Functional(type='XC',name='LDA', libxc=False)\n",
    "HARTREE = Functional(type='HARTREE')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the total energy functional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluator = TotalFunctional(KE=KE, XC=XC, HARTREE=HARTREE, PSEUDO=PSEUDO)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Optimize the electron density with DFTpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step    Energy(a.u.)            dE              dP              Nd      Nls     Time(s)         \n",
      "0       -2.829202916983E+01     -2.829203E+01   1.071715E+01    1       1       1.508641E-02    \n",
      "!WARN : pAp small than zero :iter =  2 -13869586.071581276\n",
      "1       -3.026431867579E+01     -1.972290E+00   1.898336E+00    3       2       4.524398E-02    \n",
      "2       -3.053032393062E+01     -2.660053E-01   1.792215E-01    9       1       9.649873E-02    \n",
      "3       -3.054163434346E+01     -1.131041E-02   9.136675E-03    6       1       1.294124E-01    \n",
      "4       -3.054206924089E+01     -4.348974E-04   7.360995E-04    7       1       1.677411E-01    \n",
      "5       -3.054214000359E+01     -7.076270E-05   5.784101E-05    11      1       2.224207E-01    \n",
      "6       -3.054214279047E+01     -2.786887E-06   3.930147E-06    8       1       2.638590E-01    \n",
      "7       -3.054214313039E+01     -3.399122E-07   3.422536E-07    11      1       3.183517E-01    \n",
      "8       -3.054214314688E+01     -1.649943E-08   1.956503E-08    8       1       3.602667E-01    \n",
      "#### Density Optimization Converged ####\n",
      "Chemical potential (a.u.): 0.9621991736199328\n",
      "Chemical potential (eV)  : 26.18277314569915\n"
     ]
    }
   ],
   "source": [
    "optimization_options = {'econv' : 1e-6*ions.nat}\n",
    "opt = Optimization(EnergyEvaluator=evaluator, optimization_options = optimization_options, optimization_method = 'TN')\n",
    "rho = opt.optimize_rho(guess_rho=rho_ini)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The density obtained is from the local part of the GBRV PP and thus it is far from the KS density"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LPP optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The delta_pp function is a polynomial which coefficients {a} are optimized to reproduce the KS electron density."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def delta_pp(r, rcut, a):\n",
    "    d = r - rcut\n",
    "    b = (3*a[0]*rcut-4*a[1]*rcut**2+5*a[2]*rcut**3)/2.0\n",
    "    v = b*d**2 + a[0]*d**3 + a[1]*d**4+a[2]*d**5\n",
    "    v[r>rcut] = 0.0\n",
    "    return v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following function represents the new tunable short range PP on the simulation grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lpp2vloc(r, v, ions, grid, zval=0.0):\n",
    "    engine = PSP(None)\n",
    "    engine.r = r\n",
    "    engine.v = v\n",
    "    engine._zval = zval\n",
    "    pseudo = LocalPseudo(grid = grid, ions=ions, PP_list={'Au':engine}, MaxPoints=MaxPoints)\n",
    "    pseudo.local_PP()\n",
    "    return pseudo._vreal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "grid = rho_target.grid\n",
    "rcut = 2.35 # Taken from the GBRV PP cutoff radius\n",
    "r = np.linspace(0, rcut, 100)\n",
    "a = np.zeros(3)\n",
    "\n",
    "ext = Functional(type='EXT')\n",
    "evaluator.UpdateFunctional(newFuncDict={'EXT': ext})\n",
    "\n",
    "opt = Optimization(EnergyEvaluator=evaluator)\n",
    "\n",
    "rho_ini = rho_target.copy()\n",
    "environ['LOGLEVEL'] = 4\n",
    "def delta_rho(a):\n",
    "    v = delta_pp(r, rcut, a)\n",
    "    ext.v = lpp2vloc(r, v, ions, grid)\n",
    "    rho = opt.optimize_rho(guess_rho=rho_ini)\n",
    "    rho_ini[:]=rho\n",
    "    diff = 0.5 * (np.abs(rho - rho_target)).integral()\n",
    "    # print('aa:', a, diff)\n",
    "    return diff"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once callable functions are defined we can optimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = minimize(delta_rho, a, method='Powell', options={'ftol': 1.0e-4})\n",
    "environ['LOGLEVEL'] = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = res.x\n",
    "key = 'Au'\n",
    "r = PSEUDO.readpp.pp[key].r\n",
    "vl = PSEUDO.readpp.pp[key].v\n",
    "v = delta_pp(r, rcut, a)\n",
    "v += vl\n",
    "\n",
    "engine = PSP(None)\n",
    "engine.r = r\n",
    "engine.v = v\n",
    "engine.info['atomicnum'] = 79 # From GBRV PP\n",
    "engine._zval = 11.0 # From GBRV PP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the Local pseudopotentials and the electron density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f21d78eafe0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(r,v, label='New LPP')\n",
    "plt.plot(r,vl, label='Original LPP')\n",
    "rcut = rcut\n",
    "r1=np.linspace(start=0.01,stop=20,num=1000)\n",
    "plt.vlines(x=rcut,ymin=-100,ymax=100,colors='k')\n",
    "plt.plot(r1,delta_pp(r1,rcut,a), label='$v_{LPP}(r)$')\n",
    "plt.ylim(-15,5)\n",
    "plt.xlim(0,5)\n",
    "plt.title('Local part of PP of Au')\n",
    "plt.ylabel('v(r)')\n",
    "plt.xlabel('r')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Saving as a psp8 PP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine.write('Au_pgbrv02.psp8')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
