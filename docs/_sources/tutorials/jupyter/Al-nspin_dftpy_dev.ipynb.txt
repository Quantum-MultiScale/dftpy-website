{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cQOkuxiXIa-g",
    "outputId": "ff9182e5-8960-475e-dabe-4187537fa7ba"
   },
   "source": [
    "# Spin unrestricted calculations with DFTpy\n",
    "\n",
    "In this tutorial we will perform spin unrestricted calculations with OF-DFT using DFTpy\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Note:</b> Install the dev branch of DFTpy.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "HxLsXAB7IgLt"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from ase.build import bulk\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we need to load the necessary modules form DFTpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "iZ73Lb41JEDg"
   },
   "outputs": [],
   "source": [
    "from dftpy.api.api4ase import DFTpyCalculator\n",
    "from dftpy.config import DefaultOption, OptionFormat\n",
    "from dftpy.functional import LocalPseudo, Functional, TotalFunctional\n",
    "from dftpy.optimization import Optimization\n",
    "from dftpy.ions import Ions\n",
    "from dftpy.field import DirectField\n",
    "from dftpy.grid import DirectGrid\n",
    "from dftpy.math_utils import ecut2nr\n",
    "from dftpy.formats import io"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scale_density(rho, m):\n",
    "    if rho.rank != 2:\n",
    "        raise Exception(\"Rho must be rank 2\")\n",
    "    nelec = rho.integral()\n",
    "    nnelec = nelec + np.array([m/2.0,-m/2.0])\n",
    "    rho[0] *=  nnelec[0]/nelec[0]\n",
    "    rho[1] *=  nnelec[1]/nelec[1]\n",
    "    return rho"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the FCC Al crystal structure with ASE and then change the units to DFTpy units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "QQwd02izI6Rx"
   },
   "outputs": [],
   "source": [
    "atoms = bulk('Al', 'fcc', a=4.05)\n",
    "ions = Ions.from_ase(atoms)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the Exchange-correlation, Kinetic energy and Hartree functionals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "1dgFJiSuI8i1"
   },
   "outputs": [],
   "source": [
    "XC = Functional(type='XC',name='LDA', libxc=False)\n",
    "HARTREE = Functional(type='HARTREE')\n",
    "KEDF = Functional(type='KEDF', name='TFvW', y=1)\n",
    "opt_options = {'econv' : 1e-7*ions.nat, 'maxiter': 50} "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build the grid and define the Local pseudopotential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "XVkpyYBlJTDK"
   },
   "outputs": [],
   "source": [
    "path = \"../DATA\"\n",
    "PP_list = {'Al':'al.lda.recpot'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "setting key: Al -> al.lda.recpot\n"
     ]
    }
   ],
   "source": [
    "nr = ecut2nr(ecut=90, lattice=ions.cell)\n",
    "grid = DirectGrid(lattice=ions.cell, nr=nr)\n",
    "PSEUDO = LocalPseudo(grid=grid, ions=ions, PP_list=PP_list)\n",
    "rho = DirectField(grid=grid,rank=2)\n",
    "rho[:] = ions.get_ncharges() / ions.cell.volume / rho.rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Changing the number of beta and alpha lectrons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho = scale_density(rho,0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.55, 1.45])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rho.integral()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perform the optimization of the density"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluator = TotalFunctional(KE=KEDF, XC=XC, HARTREE=HARTREE, PSEUDO=PSEUDO)\n",
    "opt = Optimization(EnergyEvaluator=evaluator, optimization_method='TN', optimization_options=opt_options)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step    Energy(a.u.)            dE              dP              Nd      Nls     Time(s)         \n",
      "0       -2.048930037247E+00     -2.048930E+00   2.989137E-01    1       1       2.462769E-02    \n",
      "1       -2.107897495307E+00     -5.896746E-02   4.295104E-02    4       40      4.644361E-01    \n",
      "2       -2.111292714918E+00     -3.395220E-03   3.350295E-03    28      40      1.114891E+00    \n",
      "3       -2.111412636599E+00     -1.199217E-04   2.943865E-04    20      40      1.690181E+00    \n",
      "4       -2.111424538274E+00     -1.190167E-05   2.342158E-05    28      19      2.133016E+00    \n",
      "5       -2.111425031454E+00     -4.931807E-07   1.915958E-06    18      19      2.487958E+00    \n",
      "6       -2.111425095467E+00     -6.401236E-08   1.582082E-07    24      19      2.898481E+00    \n",
      "7       -2.111425100518E+00     -5.051136E-09   6.574188E-08    22      19      3.287766E+00    \n",
      "#### Density Optimization Converged ####\n",
      "Chemical potential (a.u.): [0.28534709 0.28956009]\n",
      "Chemical potential (eV)  : [7.76468977 7.87933132]\n"
     ]
    }
   ],
   "source": [
    "rho = opt.optimize_rho(guess_rho=rho)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally compute the total energy of the system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.1114251005178186"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evaluator.Energy(rho)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
